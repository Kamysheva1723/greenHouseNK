#ifndef SYSTEM_TASKS_H
#define SYSTEM_TASKS_H

#include <cstdint>  // For fixed-width integer types

/*
 * Initialization Data Structure:
 * Forward declaration for InitDataStruct is used to pass shared objects (sensors, controller, UI, EEPROM storage, etc.)
 * among different tasks during system setup and operation.
 */
struct InitDataStruct;

/*
 * System Tasks Prototypes
 *
 * These task functions are designed as part of the Greenhouse Fertilization System.
 * They are created and managed under FreeRTOS and are responsible for different aspects of system operation:
 *
 * 1. initTask: Initializes persistent system parameters from EEPROM and synchronizes them with the Controller and UI.
 * 2. sensorTask: Periodically reads environmental sensor data and updates control logic accordingly.
 * 3. controlTask: (Prototype provided) Responsible for system control loop execution (possibly integrated into another module).
 * 4. uiTask: Refreshes and updates the on-device user interface (OLED display) with system status.
 * 5. eepromTask: Handles background EEPROM operations related to system persistence and maintenance.
 * 6. rotaryEventTask: Processes asynchronous events from the rotary encoder, enabling real-time user interaction.
 * 7. cloudTask: Manages secure TLS communications to send sensor data to a remote server and to retrieve remote commands.
 *
 * These tasks interact via FreeRTOS queues, timers, and shared data structures to achieve reliable real-time operation.
 */

// -----------------------------------------------------------------------------
// initTask:
// Performs initial system setup by loading persistent parameters (e.g., CO₂ setpoint) from EEPROM,
// and synchronizes those values with the Controller (for data processing/actuation) and UI (for display).
void initTask(void* param);

// -----------------------------------------------------------------------------
// sensorTask:
// Periodically reads data from all connected sensor modules (CO₂, Temperature/Humidity, Pressure)
// and triggers control logic updates in the Controller based on the current environmental conditions.
void sensorTask(void* param);

// -----------------------------------------------------------------------------
// controlTask:
// Prototype for the control task responsible for executing the control loop.
// It likely involves processing sensor data and invoking actuator commands based on set thresholds.
void controlTask(void* param);

// -----------------------------------------------------------------------------
// uiTask:
// Manages updates to the user interface, refreshing the display periodically (e.g., every 1000 ms)
// to reflect real-time sensor readings and system state.
void uiTask(void* param);

// -----------------------------------------------------------------------------
// eepromTask:
// Handles background operations related to EEPROM storage, ensuring that critical parameters
// (like CO₂ setpoints) are periodically checked and maintained in persistent memory.
void eepromTask(void* param);

// -----------------------------------------------------------------------------
// rotaryEventTask:
// Processes asynchronous events generated by the rotary encoder (both rotational and push-button events)
// via a FreeRTOS queue. This enables real-time adjustment of system settings via local user input.
void rotaryEventTask(void *param);

// -----------------------------------------------------------------------------
// cloudTask:
// Manages secure cloud communications, sending sensor data to a remote server and retrieving remote commands
// over a TLS-secured connection. This task typically operates periodically (e.g., every 60 seconds).
void cloudTask(void* param);

#endif // SYSTEM_TASKS_H