#ifndef GPIO_EVENT_H
#define GPIO_EVENT_H

#include <cstdint>

// ----------------------------------------------------------------------------
// EventType Enumeration
//
// This enumeration defines the types of events generated by the rotary encoder.
// - PRESS: Indicates that the rotary encoder's push-button was pressed.
// - TURN: Indicates that the rotary encoder was rotated.
enum class EventType { 
    PRESS, // Represents a button press event.
    TURN   // Represents a rotational turn event.
};

// ----------------------------------------------------------------------------
// GpioEvent Class
//
// The GpioEvent class encapsulates an event generated from a GPIO pin associated 
// with the rotary encoder. It includes the type of event (either PRESS or TURN), 
// the rotation direction (only applicable when the event is a TURN), and a timestamp 
// which can be used for debouncing or logging purposes.
class GpioEvent {
public:
    EventType type;       // The type of the event: either PRESS or TURN.
    bool      clockwise;  // Indicates the rotation direction when the event is a TURN event.
                          // True if the rotation is clockwise, false if counter-clockwise.
    uint32_t  timestamp;  // Timestamp (in milliseconds since boot) when the event occurred.
                          // Useful for debouncing and ordering events.

    /**
     * @brief Default constructor for GpioEvent.
     *
     * Initializes an event with default values:
     * - type is set to PRESS,
     * - clockwise is set to false (not applicable for press events),
     * - timestamp is set to 0.
     */
    GpioEvent()
            : type(EventType::PRESS),
              clockwise(false),
              timestamp(0)
    {}

    /**
     * @brief Parameterized constructor for GpioEvent.
     *
     * Allows the creation of a GpioEvent with specific event type, rotation direction, and timestamp.
     *
     * @param t  The type of event (PRESS or TURN).
     * @param cw The rotation direction (true for clockwise, false for counter-clockwise).
     *           This parameter is meaningful only if the event type is TURN.
     * @param ts A timestamp indicating when the event was generated.
     */
    GpioEvent(EventType t, bool cw, uint32_t ts)
            : type(t),
              clockwise(cw),
              timestamp(ts)
    {}
};

#endif // GPIO_EVENT_H